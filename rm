# la fonction a besoin du chemin relatif ou absolu du fichier en argument
function remove_fich {


lifich=$(cat archive | grep -n $1 | cut -f1 -d ':') #met le numero de la ligne correspondant au fichier a supprimer dans lifich
debf=$(grep "$1" archive | cut -f4 -d' ') #met le numero de debut du contenu du fichier dans debf
finf=$(grep "$1" archive | cut -f5 -d' ') #met le numero de la fin du contenu du fichier dans finf

debf=$(( $debf+$posf )) #on ajoute le debut du contenu et le debut du fichier par rapport au contenu
finf=$(( $debf+$finf )) #on ajoute le debut du contenu et la fin du fichier par rapport au contenu

sed -i ""$debf","$finf" s/^.*$/ /"  archive #on remplace les lignes du contenu du fichier par des lignes blanches
sed -i "$lifich s/^.*$/ /"  archive #on remplace la ligne du fichier dans le header par une ligne blanche
}

posd=$(cat archive | head -1 | tail -1 | cut -f1 -d:) #recupere la position du début du header
posf=$(cat archive | head -1 | tail -1 | cut -f2 -d:) #recupere la position du debut du contenu
if [ "$(grep "^directory $1$" archive | cut -f2 -d " ")" = "$1" ] #regarde si le fichier est un dossier(seul les dossiers sont affichés avec leurs positions absolues)

then
        echo "cette fonction de fonctionne qu'avec un fichier" #averti l'utilisateur
        return 0 #sort de la fonction rm
elif [ "$(grep "$(echo "$1" | awk -F"/" '{print $NF}')" archive | cut -f2 -d " " | cut -c1)" = "-" ] #si le fichier existe(on regarde si le 1er caractere du code des droits du fichier est un tiret)

then
        
        fich=$(echo "$1" | awk -F"/" '{print $NF}') #on met le nom du fichier en relatif dans fich
        remove_fich $fich #on appelle la fonction remove fich
else echo "veuillez entrer un nom de fichier correct" #si ce n'est ni un fichier ni un dossier c'est un erreur
fi




